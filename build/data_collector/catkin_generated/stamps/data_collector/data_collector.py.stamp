#!/usr/bin/env python

import rospy
from gazebo_msgs.msg import ModelStates
import rospy
import tf2_ros
import tf
import message_filters
from geometry_msgs.msg import Pose
from geometry_msgs.msg import PoseStamped
from geometry_msgs.msg import Twist
from std_msgs.msg import Float32
from sensor_msgs.msg import Imu
from geometry_msgs.msg import TransformStamped
from geometry_msgs.msg import WrenchStamped
from nav_msgs.msg import Odometry
from data_collector import Ball_Car
def callback(Ball_Bowl_RelativePose_, theta,ball_imu,ball_force,ball_odom,car_odom,cmd):
        pub = rospy.Publisher("/data_collector_pub",Float32,queue_size=10)
        print("______________-")
        print(rospy.get_time())

        rospy.loginfo(Ball_Bowl_RelativePose_)
        print(theta)
        print(cmd)
        print(ball_imu)
        print(ball_force)
        print(ball_odom)
        print(car_odom)
        print(cmd)
        pub.publish(theta)


def listener():
        rospy.init_node('data_collector', anonymous=True)

        Ball_Bowl_RelativePose_ = message_filters.Subscriber("/Ball_Bowl_RelativePose_", PoseStamped)
        theta = message_filters.Subscriber("/theta", Float32)
        ball_imu  = message_filters.Subscriber("/ball/imu",Imu)
        ball_force = message_filters.Subscriber("/ball/force",WrenchStamped)
        ball_odom = message_filters.Subscriber("/ball/odom",Odometry)
        cmd= message_filters.Subscriber("/cmd_vel",Twist)
        car_odom = message_filters.Subscriber("/odom",Odometry)
        ts = message_filters.ApproximateTimeSynchronizer([Ball_Bowl_RelativePose_, theta,ball_imu,ball_force,ball_odom,car_odom,cmd], 100, 1, allow_headerless=True)
        ts.registerCallback(callback)
        # spin() simply keeps python from exiting until this node is stopped
        rospy.spin()

if __name__ == '__main__':
        listener()
